---
title: "Assignment 1"
---

My first assignment has three parts.

## (a)

### A Brief Summary of RStudio Global 2022 Conference Talks

[https://thomasmock.quarto.pub/quarto-curious/](https://thomasmock.quarto.pub/quarto-curious/#/TitleSlide)

Quarto is an open-source and next-generation publishing system for RMarkdown. It allows users to create documents, presentations, websites, and blogs using a single codebase. Quarto has several advantages over RMarkdown, in

-   It can generate multiple output formats from a single codebase, which saves time and effort.

-   It has a more powerful template system, which makes it easier to create custom documents, presentations, and websites.

-   It integrates with popular version control systems and collaboration tools, making it easy to collaborate on projects.

-   It can be used with Posit Cloud and Quarto Team Server for continuous integration and continuous delivery.

If you are looking for a powerful and flexible publishing system for RMarkdown, Quarto is a great option.

[^1]

[^1]: The content above was generated by AI using the following prompt:

    ```         
    Could you provide a brief summary of https://thomasmock.quarto.pub/quarto-curious/
    ```

## (b)

### Differences Between R and Python

#### **Assignment Operation**

##### **R**

In R, the assignment operator is the `<-` symbol. It can be used to assign a value to a variable, create a new variable, or update the value of an existing variable.

Here are some examples of how to use the `<-` operator in R:

```{r}
# Assign the value of 1 to the variable `x`  
x <- 1   
# Update the value of the variable `x` by adding 1 to it  
x <- x + 1   
# Print the value of the variable `x`  
print(x) 
```

##### **Python**

In Python, the assignment operator is the `=` symbol. It can be used to assign a value to a variable or update the value of an existing variable.

Here are some examples of how to use the `=` operator in Python:

```   {python}      
# Assign the value of 1 to the variable  `x` 
x = 1   
# Update the value of the variable `x` by adding 1 to it  
x += 1   
# Print the value of the variable `x`  
print(x) 
```

As you can see, the main difference between the assignment operators in R and Python is that the `<-` operator in R is makes sense in mathematics and easy to understand so that avoids confusion.

#### **Indexing**

##### **R**

In R, the indexing starts from 1. 1-based indexing is simpler to implement in programming languages than 0-based indexing. This is because 1-based indexing allows programmers to use the same indexing scheme for both vectors and matrices.

```{r}
my_list <- c(1, 2, 3, 4, 5)  
# Print the third element of the list 
print(my_list[3]) 
```

##### **Python**

In Python, the indexing starts from 0, this can be confusing for some users, especially those who are new to programming. There are a few reasons why Python uses 0-based indexing. One reason is that it is more consistent with the way that computers store data in memory. In memory, data is stored in a contiguous block of addresses, and the first address in the block is always 0. This makes it easier for computers to access data, and it also makes it easier for programmers to write code to manipulate data.

```{python}         
my_list = [1, 2, 3, 4, 5]  
# Print the third element of the list 
print(my_list[2]) 
```

Finally, 0-based indexing is more consistent with the way that mathematics indexes its data structures. For example, in mathematics, arrays are indexed starting from 0. So, R's indexing makes more sense.

#### **Power Operation**

##### **R**

The power operator, represented by the `^` symbol, raises a number to a power. The syntax for the power operator is as follows:

```         
base ^ exponent 
```

Where `base` is the number to be raised to the power and `exponent` is the power to which `base` is raised.

For example, the following code raises the number 3 to the power of 2:

```{r}
3 ^ 2 
```

##### **Python**

Python's power operation is the `**` operator to raise a number to a power. The syntax for the power operator in Python is as :

```       
base ** exponent
```

Where `base` is the number to be raised to the power and `exponent` is the power to which `base` is raised.

For example, the following code raises the number 3 to the power of 2:

```   {python}      
3 ** 2
```

## (c)

### Task

Import the "na_example" data set from the dslabs package. Your web page should first show the content of "na_example" data set along with its NA values, and then, the total number of NAs. Then replace all NA values in the "na_example" data set with 0, and store it as a new object. After making this change, print the new data frame (the one without NAs) and the total number of NAs in this new data frame to the page. (Include R codes that will produce these outputs)

```{r}
library(dslabs)

# Import the "na_example" data set
na_example <- dslabs::na_example

# View the content of the data set
na_example

# Count the total number of NA values
sum(is.na(na_example))

# Replace all NA values with 0
na_example_no_na <- na_example
na_example_no_na[is.na(na_example)] <- 0

# View the new data frame
na_example_no_na

# Count the total number of NA values in the new data frame
sum(is.na(na_example_no_na))
```
