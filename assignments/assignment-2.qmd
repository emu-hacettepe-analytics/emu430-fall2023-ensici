---
title: "Assignment 2"
---

# Web Scraping of Turkish Movies from IMDb

1.  Using the filters on https://m.imdb.com/search, list all Turkish movies with more than 2500 reviews, and save the URLs.

2.  Start web scrapping to create a Data Frame with columns: Title, Year, Duration, Rating, Votes

```{r}

library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)


# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"

url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"

# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)

# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()  # Corrected variable name

# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
  website <- read_html(url)
  
  # Extract movie Title
  title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
  title_names <- tail(head(title_names, -1), -1)
  title_names <- str_split(title_names, " ", n = 2)
  title_names <- unlist(lapply(title_names, function(x) x[2]))
  
  # Extract release year
  year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()

  # Extract movie rating
  rating <- website %>%
    html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
    html_text() %>%
    substr(1, 3) %>%
    as.numeric()
  
  # Extract number of votes
  vote <- website %>%
    html_node(".sc-53c98e73-0.kRnqtn") %>%
    html_text() %>%
    parse_number()
  
  # Extract number of duration
   duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
   duration <- html_text(duration)
  
    hour <- str_extract(duration, "\\d+h") %>%
    str_replace("h", "") %>%
    as.numeric() %% 10
  
    total_duration <- hour * 60 + str_extract(duration, "\\d+m") %>%
    str_replace("m", "") %>%
    as.numeric()

  
  # Append data to vectors
  Title <- append(Title, title_names)
  Year <- append(Year, year)
  Rating <- append(Rating, rating)
  Votes <- append(Votes, vote)  # Corrected variable name
  Duration <- append(Duration, total_duration)
}

# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)

# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))

```

3.  Conduct an Exploratory Data Analysis on your data set, create visualizations to address the following questions, and provide insightful facts about the Turkish movie industry. The questions below will guide your analysis, but you are not restricted to them. Any additional insights will be a bonus.

    a\) Arrange your data frame in descending order by Rating. Present the top 5 and bottom 5 movies based on user ratings. Have you watched any of these movies? Do you agree or disagree with their current IMDb Ratings?

```{r}
# Arrange the data frame in descending order by Rating
movies <- movies[order(movies$Rating, decreasing = TRUE),]

# Top 5 and bottom 5 movies based on user ratings
top5_movies <- head(movies, 5)
bottom5_movies <- tail(movies, 5)

# Print top and bottom movies
cat("Top 5 Movies:\n")
print(top5_movies)
cat("Bottom 5 Movies:\n")
print(bottom5_movies)
```

Even though I have great interest and respect for Kemal Sunal's works, I think there are better films that can be found in the top 5. When I look at the last 5, I have no idea because they are movies I haven't watched.

b)  Check the ratings of 2-3 of your favorite movies. What are their standings?

    1.  [CM101MMXI Fundamentals](https://m.imdb.com/title/tt2592910/?ref_=sr_t_51)
    2.  [Delibal](https://www.imdb.com/title/tt5076214/)
    3.  [Bihter](https://www.imdb.com/title/tt26258488/?ref_=fn_al_tt_1)

```{r}
# My favorite movies
favorite_movies <- c("Delibal","CM101MMXI Fundamentals","Bihter")  

# Check the ratings of my favorite movies
ratings_of_favorite_movies <- movies[(movies$Title %in% favorite_movies), c("Title", "Rating", "Year", "Duration")]

# Arrange the data frame in descending order by Rating
ratings_of_favorite_movies <- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]

# Print standings of my favorite movies
cat("Standings of My Favorite Movies:\n")
print(ratings_of_favorite_movies)

```

c.  Considering that audience rating is a crucial indicator of movie quality, what can you infer about the average ratings of Turkish movies over the years? Calculate yearly rating averages and plot them as a scatter plot. Hint: Use functions like group_by(), summarise(), mean(), ggplot(), geom_point(). Similarly, plot the number of movies over the years. You might observe that using yearly averages could be misleading due to the increasing number of movies each year. As an alternative solution, plot box plots of ratings over the years (each year having a box plot showing statistics about the ratings of movies in that year). What insights do you gather from the box plot?

```{r}
# Assuming 'movies' data frame is available with columns: Title, Year, Rating, Votes

# Load required libraries
library(tidyverse)
library(ggplot2)

# Calculate yearly rating averages
average_ratings <- movies %>%
  group_by(Year) %>%
  summarise(Average_Rating = mean(Rating),
            Number_of_Movies = n())

# Scatter plot for yearly rating averages
ggplot(average_ratings, aes(x = Year, y = Average_Rating, size = Number_of_Movies)) +
  geom_point() +
  labs(title = "Yearly Average Ratings of Turkish Movies",
       x = "Year",
       y = "Average Rating") +
  theme_minimal()

# Number of movies over the years
ggplot(average_ratings, aes(x = Year, y = Number_of_Movies)) +
  geom_bar(stat = "identity", fill = "pink") +
  labs(title = "Number of Turkish Movies Released Each Year",
       x = "Year",
       y = "Number of Movies") +
  theme_minimal()

# Box plots of ratings over the years
ggplot(movies, aes(x = as.factor(Year), y = Rating)) +
  geom_boxplot(fill = "pink") +
  labs(title = "Box Plots of Ratings of Turkish Movies Over the Years",
       x = "Year",
       y = "Rating") +
  theme_minimal()
```

d.  Do you believe there is a relationship between the number of votes a movie received and its rating? Investigate the correlation between Votes and Ratings.

```{r}

# Assuming 'movies' is your data frame with columns: Title, Year, Duration, Rating, Votes, Rank

# Calculate correlation coefficient between Votes and Ratings
corr_votes_rating <- cor(movies$Votes, movies$Rating)

# Print the correlation coefficient
cat("Correlation Coefficient between Votes and Ratings:", corr_votes_rating, "\n")

```

e.  Do you believe there is a relationship between a movie's duration and its rating? Investigate the correlation between Duration and Ratings.

```{r}
# Assuming 'movies' is your data frame with columns: Title, Year, Duration, Rating, Votes, Rank

# Calculate correlation coefficient between Duration and Ratings
corr_duration_rating <- cor(movies$Duration, movies$Rating)

# Print the correlation coefficient
cat("Correlation Coefficient between Duration and Ratings:", corr_duration_rating, "\n")

```

As standard deviation is zero, we can say there is no relationship between duration and rating.

4.  Repeat steps 1 and 2 for a different advanced IMDb search. This time, find Turkish movies that are in the top 1000 movies on IMDb. Perform similar scraping to create another Data Frame with only the columns: Title, Year.

    <https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&groups=top_1000&country_of_origin=TR>

```{r}
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)

# IMDb URL for Top1000
url_top_1000  <- "https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&groups=top_1000&country_of_origin=TR"


# Create empty vectors to store movie details
Title <- c()
Year <- c()


# Loop through each URL and scrape data & read HTML content of the IMDb website
for(url in url_top_1000){
  website = read_html(url)
  
  # Extract movie Title
  title_names <- website %>% html_nodes('.ipc-title__text')
  title_names <- html_text(title_names)
  title_names <- tail(head(title_names,-1),-1)
  title_names <- str_split(title_names, " ", n=2)
  title_names <- unlist(lapply(title_names, function(x) {x[2]}))
  
  # Extract release year
  year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
  year <- html_text(year)
  year <- substr(year, 1, 4)
  year <- as.numeric(year)
  
  # Append data to vectors
  Title <- append(Title,title_names)
  Year <- append(Year, year)

}

# Create a data frame from the scraped data
movies_top_1000_turkish <- data.frame(Title, Year)

# Show the first few rows of the data frame 
cat("First few rows of the 'movies' data frame:\n")
print(head(movies_top_1000_turkish))

```

```{r}
# Assuming 'movies_top_1000_turkish' and 'movies' have columns: "Title", "Year", "Duration", "Rating", "Votes"
Sys.setlocale("LC_ALL", "en_US.UTF-8")

# Merge based on "Title" and "Year"
top1000_merged <- merge(movies_top_1000_turkish, movies, by = c("Title", "Year"), all.x = TRUE)

# Display the merged data frame
print(top1000_merged)

```
