[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the EMUTrend Explorers project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to our lovely project .\nSummary\nAnalyzing Preference Patterns: A Study on Industrial Engineering Programs in Ankara\nThis title represents a study examining preference patterns of Industrial Engineering programs in Ankara. The project aims to analyze the impact of these programs on student preferences, exploring trends in program preference and identifying potential influencing factors. Key focal points of the study may include preference rates, student motivation for program selection, notable features of the programs, and future expectations. The goal is to shed light on how Industrial Engineering programs in Ankara are perceived and chosen by students.\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Sena’s Analytics Lab",
    "section": "",
    "text": "Hello! My name is Sena Nur Enşici\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more 🤓\n\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Web Scraping of Turkish Movies from IMDb\n\nUsing the filters on https://m.imdb.com/search, list all Turkish movies with more than 2500 reviews, and save the URLs.\nStart web scrapping to create a Data Frame with columns: Title, Year, Duration, Rating, Votes\n\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'tidyr' was built under R version 4.3.2\n\n\nWarning: package 'readr' was built under R version 4.3.2\n\n\nWarning: package 'purrr' was built under R version 4.3.2\n\n\nWarning: package 'dplyr' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\nWarning: package 'forcats' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(rvest)\n\nWarning: package 'rvest' was built under R version 4.3.2\n\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(ggplot2)\n\n\n# IMDb URLs for movies between 2010-2023 and before 2010\nurl_btw_2010_2023 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\n\nurl_before_2010 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\n\n# Combine the URLs into a vector\nurl_vector &lt;- c(url_btw_2010_2023, url_before_2010)\n\n# Create empty vectors to store movie details\nTitle &lt;- c()\nYear &lt;- c()\nDuration &lt;- c()\nRating &lt;- c()\nVotes &lt;- c()  # Corrected variable name\n\n# Loop through each URL and scrape data & read HTML content of the IMDb website\nfor (url in url_vector) {\n  website &lt;- read_html(url)\n  \n  # Extract movie Title\n  title_names &lt;- website %&gt;% html_nodes('.ipc-title__text') %&gt;% html_text()\n  title_names &lt;- tail(head(title_names, -1), -1)\n  title_names &lt;- str_split(title_names, \" \", n = 2)\n  title_names &lt;- unlist(lapply(title_names, function(x) x[2]))\n  \n  # Extract release year\n  year &lt;- website %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\") %&gt;% html_text() %&gt;% substr(1, 4) %&gt;% as.numeric()\n\n  # Extract movie rating\n  rating &lt;- website %&gt;%\n    html_nodes(\".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating\") %&gt;%\n    html_text() %&gt;%\n    substr(1, 3) %&gt;%\n    as.numeric()\n  \n  # Extract number of votes\n  vote &lt;- website %&gt;%\n    html_node(\".sc-53c98e73-0.kRnqtn\") %&gt;%\n    html_text() %&gt;%\n    parse_number()\n  \n  # Extract number of duration\n   duration &lt;- website %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\n   duration &lt;- html_text(duration)\n  \n    hour &lt;- str_extract(duration, \"\\\\d+h\") %&gt;%\n    str_replace(\"h\", \"\") %&gt;%\n    as.numeric() %% 10\n  \n    total_duration &lt;- hour * 60 + str_extract(duration, \"\\\\d+m\") %&gt;%\n    str_replace(\"m\", \"\") %&gt;%\n    as.numeric()\n\n  \n  # Append data to vectors\n  Title &lt;- append(Title, title_names)\n  Year &lt;- append(Year, year)\n  Rating &lt;- append(Rating, rating)\n  Votes &lt;- append(Votes, vote)  # Corrected variable name\n  Duration &lt;- append(Duration, total_duration)\n}\n\n# Create a data frame from the scraped data\nmovies &lt;- data.frame(Title, Year, Duration, Rating, Votes)\n\n# Show the first few rows of the data frame\ncat(\"First few rows of the 'movies' data frame:\\n\")\n\nFirst few rows of the 'movies' data frame:\n\nprint(head(movies))\n\n                     Title Year Duration Rating Votes\n1        Kuru Otlar Üstüne 2023      197    8.1  5063\n2  Istanbul Için Son Çagri 2023       91    5.3 35018\n3 Yedinci Kogustaki Mucize 2019      132    8.2  5063\n4           Ölümlü Dünya 2 2023      117    7.5 35018\n5                   Bihter 2023      113    3.6  5063\n6             Ölümlü Dünya 2018      107    7.6 35018\n\n\n\nConduct an Exploratory Data Analysis on your data set, create visualizations to address the following questions, and provide insightful facts about the Turkish movie industry. The questions below will guide your analysis, but you are not restricted to them. Any additional insights will be a bonus.\na) Arrange your data frame in descending order by Rating. Present the top 5 and bottom 5 movies based on user ratings. Have you watched any of these movies? Do you agree or disagree with their current IMDb Ratings?\n\n\n# Arrange the data frame in descending order by Rating\nmovies &lt;- movies[order(movies$Rating, decreasing = TRUE),]\n\n# Top 5 and bottom 5 movies based on user ratings\ntop5_movies &lt;- head(movies, 5)\nbottom5_movies &lt;- tail(movies, 5)\n\n# Print top and bottom movies\ncat(\"Top 5 Movies:\\n\")\n\nTop 5 Movies:\n\nprint(top5_movies)\n\n                           Title Year Duration Rating Votes\n257               Hababam Sinifi 1975       87    9.2  5063\n39        CM101MMXI Fundamentals 2013      139    9.1  5063\n273                   Tosun Pasa 1976       90    8.9  5063\n337 Hababam Sinifi Sinifta Kaldi 1975       95    8.9  5063\n321                Süt Kardesler 1976       80    8.8  5063\n\ncat(\"Bottom 5 Movies:\\n\")\n\nBottom 5 Movies:\n\nprint(bottom5_movies)\n\n                             Title Year Duration Rating Votes\n189                 Cumali Ceber 2 2018      100    1.2  5063\n199                          Müjde 2022       NA    1.2  5063\n245              15/07 Safak Vakti 2021       95    1.2  5063\n101 Cumali Ceber: Allah Seni Alsin 2017      100    1.0  5063\n150                           Reis 2017      108    1.0 35018\n\n\nEven though I have great interest and respect for Kemal Sunal’s works, I think there are better films that can be found in the top 5. When I look at the last 5, I have no idea because they are movies I haven’t watched.\n\nCheck the ratings of 2-3 of your favorite movies. What are their standings?\n\nCM101MMXI Fundamentals\nDelibal\nBihter\n\n\n\n# My favorite movies\nfavorite_movies &lt;- c(\"Delibal\",\"CM101MMXI Fundamentals\",\"Bihter\")  \n\n# Check the ratings of my favorite movies\nratings_of_favorite_movies &lt;- movies[(movies$Title %in% favorite_movies), c(\"Title\", \"Rating\", \"Year\", \"Duration\")]\n\n# Arrange the data frame in descending order by Rating\nratings_of_favorite_movies &lt;- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]\n\n# Print standings of my favorite movies\ncat(\"Standings of My Favorite Movies:\\n\")\n\nStandings of My Favorite Movies:\n\nprint(ratings_of_favorite_movies)\n\n                    Title Rating Year Duration\n39 CM101MMXI Fundamentals    9.1 2013      139\n67                Delibal    6.7 2015      117\n5                  Bihter    3.6 2023      113\n\n\n\nConsidering that audience rating is a crucial indicator of movie quality, what can you infer about the average ratings of Turkish movies over the years? Calculate yearly rating averages and plot them as a scatter plot. Hint: Use functions like group_by(), summarise(), mean(), ggplot(), geom_point(). Similarly, plot the number of movies over the years. You might observe that using yearly averages could be misleading due to the increasing number of movies each year. As an alternative solution, plot box plots of ratings over the years (each year having a box plot showing statistics about the ratings of movies in that year). What insights do you gather from the box plot?\n\n\n# Assuming 'movies' data frame is available with columns: Title, Year, Rating, Votes\n\n# Load required libraries\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# Calculate yearly rating averages\naverage_ratings &lt;- movies %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_Rating = mean(Rating),\n            Number_of_Movies = n())\n\n# Scatter plot for yearly rating averages\nggplot(average_ratings, aes(x = Year, y = Average_Rating, size = Number_of_Movies)) +\n  geom_point() +\n  labs(title = \"Yearly Average Ratings of Turkish Movies\",\n       x = \"Year\",\n       y = \"Average Rating\") +\n  theme_minimal()\n\n\n\n# Number of movies over the years\nggplot(average_ratings, aes(x = Year, y = Number_of_Movies)) +\n  geom_bar(stat = \"identity\", fill = \"pink\") +\n  labs(title = \"Number of Turkish Movies Released Each Year\",\n       x = \"Year\",\n       y = \"Number of Movies\") +\n  theme_minimal()\n\n\n\n# Box plots of ratings over the years\nggplot(movies, aes(x = as.factor(Year), y = Rating)) +\n  geom_boxplot(fill = \"pink\") +\n  labs(title = \"Box Plots of Ratings of Turkish Movies Over the Years\",\n       x = \"Year\",\n       y = \"Rating\") +\n  theme_minimal()\n\n\n\n\n\nDo you believe there is a relationship between the number of votes a movie received and its rating? Investigate the correlation between Votes and Ratings.\n\n\n# Assuming 'movies' is your data frame with columns: Title, Year, Duration, Rating, Votes, Rank\n\n# Calculate correlation coefficient between Votes and Ratings\ncorr_votes_rating &lt;- cor(movies$Votes, movies$Rating)\n\n# Print the correlation coefficient\ncat(\"Correlation Coefficient between Votes and Ratings:\", corr_votes_rating, \"\\n\")\n\nCorrelation Coefficient between Votes and Ratings: 0.0332948 \n\n\n\nDo you believe there is a relationship between a movie’s duration and its rating? Investigate the correlation between Duration and Ratings.\n\n\n# Assuming 'movies' is your data frame with columns: Title, Year, Duration, Rating, Votes, Rank\n\n# Calculate correlation coefficient between Duration and Ratings\ncorr_duration_rating &lt;- cor(movies$Duration, movies$Rating)\n\n# Print the correlation coefficient\ncat(\"Correlation Coefficient between Duration and Ratings:\", corr_duration_rating, \"\\n\")\n\nCorrelation Coefficient between Duration and Ratings: NA \n\n\nWe can say there is no relationship between duration and rating.\n\nRepeat steps 1 and 2 for a different advanced IMDb search. This time, find Turkish movies that are in the top 1000 movies on IMDb. Perform similar scraping to create another Data Frame with only the columns: Title, Year.\nhttps://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&groups=top_1000&country_of_origin=TR\n\n\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\nlibrary(ggplot2)\n\n# IMDb URL for Top1000\nurl_top_1000  &lt;- \"https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&groups=top_1000&country_of_origin=TR\"\n\n\n# Create empty vectors to store movie details\nTitle &lt;- c()\nYear &lt;- c()\n\n\n# Loop through each URL and scrape data & read HTML content of the IMDb website\nfor(url in url_top_1000){\n  website = read_html(url)\n  \n  # Extract movie Title\n  title_names &lt;- website %&gt;% html_nodes('.ipc-title__text')\n  title_names &lt;- html_text(title_names)\n  title_names &lt;- tail(head(title_names,-1),-1)\n  title_names &lt;- str_split(title_names, \" \", n=2)\n  title_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n  \n  # Extract release year\n  year &lt;- website %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\n  year &lt;- html_text(year)\n  year &lt;- substr(year, 1, 4)\n  year &lt;- as.numeric(year)\n  \n  # Append data to vectors\n  Title &lt;- append(Title,title_names)\n  Year &lt;- append(Year, year)\n\n}\n\n# Create a data frame from the scraped data\nmovies_top_1000_turkish &lt;- data.frame(Title, Year)\n\n# Show the first few rows of the data frame \ncat(\"First few rows of the 'movies' data frame:\\n\")\n\nFirst few rows of the 'movies' data frame:\n\nprint(head(movies_top_1000_turkish))\n\n                     Title Year\n1           Babam ve Oglum 2005\n2                   Eskiya 1996\n3                 G.O.R.A. 2004\n4               Kis Uykusu 2014\n5 Yedinci Kogustaki Mucize 2019\n6  Bir Zamanlar Anadolu'da 2011\n\n\n\n# Assuming 'movies_top_1000_turkish' and 'movies' have columns: \"Title\", \"Year\", \"Duration\", \"Rating\", \"Votes\"\nSys.setlocale(\"LC_ALL\", \"en_US.UTF-8\")\n\n[1] \"LC_COLLATE=en_US.UTF-8;LC_CTYPE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8\"\n\n# Merge based on \"Title\" and \"Year\"\ntop1000_merged &lt;- merge(movies_top_1000_turkish, movies, by = c(\"Title\", \"Year\"), all.x = TRUE)\n\n# Display the merged data frame\nprint(top1000_merged)\n\n                       Title Year Duration Rating Votes\n1                Ahlat Agaci 2018      188    8.0 35018\n2  Ayla: The Daughter of War 2017      125    8.3 35018\n3             Babam ve Oglum 2005      108    8.2 35018\n4    Bir Zamanlar Anadolu'da 2011      157    7.8  5063\n5                     Eskiya 1996      128    8.1 35018\n6                   G.O.R.A. 2004      127    8.0 35018\n7   Her Sey Çok Güzel Olacak 1998      107    8.1 35018\n8                 Kis Uykusu 2014      196    8.0  5063\n9      Nefes: Vatan Sagolsun 2009      128    8.0  5063\n10                 Vizontele 2001      110    8.0  5063\n11  Yedinci Kogustaki Mucize 2019      132    8.2  5063\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "B.S., Industrial Engineering, Hacettepe University, Turkey, 2018 - ongoing."
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nFNSS, Project Management Candidate Engineer, 14/11/2022 - 28/06/2023"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nROKETSAN, Production Planning Intern, 15/08/2023 - 26/09/2023\nBAYKAR, Project Management Intern, 03/07/2023 - 12/08/2023\nTUSAŞ, Production Planning and Control Intern, 24/06/2022 - 31/07/2022"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the Fall 2023 EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on October 30, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "ensici_index.html",
    "href": "ensici_index.html",
    "title": "Welcome to Sena’s Analytics Lab",
    "section": "",
    "text": "Hello! My name is Sena Nur Enşici\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "ensici_about.html",
    "href": "ensici_about.html",
    "title": "About Me",
    "section": "",
    "text": "B.S., Industrial Engineering, Hacettepe University, Turkey, 2018 - ongoing."
  },
  {
    "objectID": "ensici_about.html#employements",
    "href": "ensici_about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nFNSS, Project Management Candidate Engineer, 14/11/2022 - 28/06/2023"
  },
  {
    "objectID": "ensici_about.html#internships",
    "href": "ensici_about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nROKETSAN, Production Planning Intern, 15/08/2023 - 26/09/2023\nBAYKAR, Project Management Intern, 03/07/2023 - 12/08/2023\nTUSAŞ, Production Planning and Control Intern, 24/06/2022 - 31/07/2022"
  },
  {
    "objectID": "ensici_posts.html",
    "href": "ensici_posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#b",
    "href": "assignments/assignment-1.html#b",
    "title": "Assignment 1",
    "section": "(b)",
    "text": "(b)\n\nDifferences Between R and Python\n\nAssignment Operation\n\nR\nIn R, the assignment operator is the &lt;- symbol. It can be used to assign a value to a variable, create a new variable, or update the value of an existing variable.\nHere are some examples of how to use the &lt;- operator in R:\n\n# Assign the value of 1 to the variable `x`  \nx &lt;- 1   \n# Update the value of the variable `x` by adding 1 to it  \nx &lt;- x + 1   \n# Print the value of the variable `x`  \nprint(x) \n\n[1] 2\n\n\n\n\nPython\nIn Python, the assignment operator is the = symbol. It can be used to assign a value to a variable or update the value of an existing variable.\nHere are some examples of how to use the = operator in Python:\n\n# Assign the value of 1 to the variable  `x` \nx = 1   \n# Update the value of the variable `x` by adding 1 to it  \nx += 1   \n# Print the value of the variable `x`  \nprint(x) \n\n2\n\n\nAs you can see, the main difference between the assignment operators in R and Python is that the &lt;- operator in R is makes sense in mathematics and easy to understand so that avoids confusion.\n\n\n\nIndexing\n\nR\nIn R, the indexing starts from 1. 1-based indexing is simpler to implement in programming languages than 0-based indexing. This is because 1-based indexing allows programmers to use the same indexing scheme for both vectors and matrices.\n\nmy_list &lt;- c(1, 2, 3, 4, 5)  \n# Print the third element of the list \nprint(my_list[3]) \n\n[1] 3\n\n\n\n\nPython\nIn Python, the indexing starts from 0, this can be confusing for some users, especially those who are new to programming. There are a few reasons why Python uses 0-based indexing. One reason is that it is more consistent with the way that computers store data in memory. In memory, data is stored in a contiguous block of addresses, and the first address in the block is always 0. This makes it easier for computers to access data, and it also makes it easier for programmers to write code to manipulate data.\n\nmy_list = [1, 2, 3, 4, 5]  \n# Print the third element of the list \nprint(my_list[2]) \n\n3\n\n\nFinally, 0-based indexing is more consistent with the way that mathematics indexes its data structures. For example, in mathematics, arrays are indexed starting from 0. So, R’s indexing makes more sense.\n\n\n\nPower Operation\n\nR\nThe power operator, represented by the ^ symbol, raises a number to a power. The syntax for the power operator is as follows:\nbase ^ exponent \nWhere base is the number to be raised to the power and exponent is the power to which base is raised.\nFor example, the following code raises the number 3 to the power of 2:\n\n3 ^ 2 \n\n[1] 9\n\n\n\n\nPython\nPython’s power operation is the ** operator to raise a number to a power. The syntax for the power operator in Python is as :\nbase ** exponent\nWhere base is the number to be raised to the power and exponent is the power to which base is raised.\nFor example, the following code raises the number 3 to the power of 2:\n\n3 ** 2\n\n9"
  },
  {
    "objectID": "assignments/assignment-1.html#c",
    "href": "assignments/assignment-1.html#c",
    "title": "Assignment 1",
    "section": "(c)",
    "text": "(c)\n\nTask\nImport the “na_example” data set from the dslabs package. Your web page should first show the content of “na_example” data set along with its NA values, and then, the total number of NAs. Then replace all NA values in the “na_example” data set with 0, and store it as a new object. After making this change, print the new data frame (the one without NAs) and the total number of NAs in this new data frame to the page. (Include R codes that will produce these outputs)\n\nlibrary(dslabs)\n\n# Import the \"na_example\" data set\nna_example &lt;- dslabs::na_example\n\n# View the content of the data set\nna_example\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n# Count the total number of NA values\nsum(is.na(na_example))\n\n[1] 145\n\n# Replace all NA values with 0\nna_example_no_na &lt;- na_example\nna_example_no_na[is.na(na_example)] &lt;- 0\n\n# View the new data frame\nna_example_no_na\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n# Count the total number of NA values in the new data frame\nsum(is.na(na_example_no_na))\n\n[1] 0"
  },
  {
    "objectID": "assignments/assignment-1.html#a",
    "href": "assignments/assignment-1.html#a",
    "title": "Assignment 1",
    "section": "(a)",
    "text": "(a)\n\nA Brief Summary of RStudio Global 2022 Conference Talks\nhttps://thomasmock.quarto.pub/quarto-curious/\nQuarto is an open-source and next-generation publishing system for RMarkdown. It allows users to create documents, presentations, websites, and blogs using a single codebase. Quarto has several advantages over RMarkdown, in\n\nIt can generate multiple output formats from a single codebase, which saves time and effort.\nIt has a more powerful template system, which makes it easier to create custom documents, presentations, and websites.\nIt integrates with popular version control systems and collaboration tools, making it easy to collaborate on projects.\nIt can be used with Posit Cloud and Quarto Team Server for continuous integration and continuous delivery.\n\nIf you are looking for a powerful and flexible publishing system for RMarkdown, Quarto is a great option.\n1"
  },
  {
    "objectID": "assignments/assignment-1.html#footnotes",
    "href": "assignments/assignment-1.html#footnotes",
    "title": "Assignment 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe content above was generated by AI using the following prompt:\nCould you provide a brief summary of https://thomasmock.quarto.pub/quarto-curious/\n↩︎"
  }
]