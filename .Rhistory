Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
substr(nchar(hour_duration), nchar(hour_duration)) %>% as.numeric() * 60
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
substr(nchar(hour_duration), nchar(hour_duration)) %>% as.numeric()*60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar (hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
substr(nchar(hour_duration), nchar(hour_duration)) %>% as.numeric()*60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar (hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
url_btw_2010_2023  <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_vector <- c(url_btw_2010_2023, url_before_2010)
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>% substr(nchar(hour_duration), nchar(hour_duration)) %>%     as.numeric() * 60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar (hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
View(movies)
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
as.numeric() * 60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar(hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
View(movies)
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
substr(nchar(hour_duration), nchar(hour_duration)) %>%
as.numeric()*60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar(hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
View(movies)
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
as.numeric() * 60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar(hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>% substr(5,5) %>% as.numeric()
hour_duration <- hour_duration * 60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>% substr(5,5) %>% as.numeric()*60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar(hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
View(movies)
