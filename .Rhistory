Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>% substr(5,5) %>% as.numeric()
hour_duration <- hour_duration * 60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>% substr(5,5) %>% as.numeric()*60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar(hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
View(movies)
# My favorite movies
favorite_movies <- c("Hükümet Kadin","CM101MMXI Fundamentals","Ölümlü Dünya 2")
# Check the ratings of my favorite movies
ratings_of_favorite_movies <- movies[(movies$Title %in% favorite_movies), c("Title", "Rating")]
# Arrange the data frame in descending order by Rating
ratings_of_favorite_movies <- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]
# Print standings of my favorite movies
cat("Standings of My Favorite Movies:\n")
print(ratings_of_favorite_movies)
# My favorite movies
favorite_movies <- c("Hükümet Kadin","CM101MMXI Fundamentals","Ölümlü Dünya 2")
# Check the ratings of my favorite movies
ratings_of_favorite_movies <- movies[(movies$Title %in% favorite_movies), c("Title", "Rating")]
# Arrange the data frame in descending order by Rating
ratings_of_favorite_movies <- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]
# Print standings of my favorite movies
cat("Standings of My Favorite Movies:\n")
print(ratings_of_favorite_movies)
# My favorite movies
favorite_movies <- c("Hukumet Kadin","CM101MMXI Fundamentals","Ölümlü Dünya 2")
# Check the ratings of my favorite movies
ratings_of_favorite_movies <- movies[(movies$Title %in% favorite_movies), c("Title", "Rating")]
# Arrange the data frame in descending order by Rating
ratings_of_favorite_movies <- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]
# Print standings of my favorite movies
cat("Standings of My Favorite Movies:\n")
print(ratings_of_favorite_movies)
# My favorite movies
favorite_movies <- c("Hükümet Kadin","CM101MMXI Fundamentals","Ölümlü Dünya 2")
# Check the ratings of my favorite movies
ratings_of_favorite_movies <- movies[(movies$Title %in% favorite_movies), c("Title", "Rating")]
# Arrange the data frame in descending order by Rating
ratings_of_favorite_movies <- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]
# Print standings of my favorite movies
cat("Standings of My Favorite Movies:\n")
print(ratings_of_favorite_movies)
View(movies)
# My favorite movies
favorite_movies <- c("Delibal","CM101MMXI Fundamentals","Bihter")
# Check the ratings of my favorite movies
ratings_of_favorite_movies <- movies[(movies$Title %in% favorite_movies), c("Title", "Rating")]
# Arrange the data frame in descending order by Rating
ratings_of_favorite_movies <- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]
# Print standings of my favorite movies
cat("Standings of My Favorite Movies:\n")
print(ratings_of_favorite_movies)
# My favorite movies
favorite_movies <- c("Delibal","CM101MMXI Fundamentals","Bihter")
# Check the ratings of my favorite movies
ratings_of_favorite_movies <- movies[(movies$Title %in% favorite_movies), c("Title", "Rating", "Duration", "Year")]
# Arrange the data frame in descending order by Rating
ratings_of_favorite_movies <- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]
# Print standings of my favorite movies
cat("Standings of My Favorite Movies:\n")
print(ratings_of_favorite_movies)
# My favorite movies
favorite_movies <- c("Delibal","CM101MMXI Fundamentals","Bihter")
# Check the ratings of my favorite movies
ratings_of_favorite_movies <- movies[(movies$Title %in% favorite_movies), c("Title", "Rating", "Duration", "Year", "Votes")]
# Arrange the data frame in descending order by Rating
ratings_of_favorite_movies <- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]
# Print standings of my favorite movies
cat("Standings of My Favorite Movies:\n")
print(ratings_of_favorite_movies)
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
url_btw_2010_2023  <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_vector <- c(url_btw_2010_2023, url_before_2010)
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>% substr(5,5) %>% as.numeric()*60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar(hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour_duration <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>% substr(5,5) %>% as.numeric()*60
minute_duration <- str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
total_duration <- hour_duration + minute_duration
son_rakam <- substr(as.character(hour_duration), nchar(hour_duration), nchar(hour_duration))
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
# Arrange the data frame in descending order by Rating
movies <- movies[order(movies$Rating, decreasing = TRUE),]
# Top 5 and bottom 5 movies based on user ratings
top5_movies <- head(movies, 5)
bottom5_movies <- tail(movies, 5)
# Print top and bottom movies
cat("Top 5 Movies:\n")
print(top5_movies)
cat("Bottom 5 Movies:\n")
print(bottom5_movies)
# My favorite movies
favorite_movies <- c("Delibal","CM101MMXI Fundamentals","Bihter")
# Check the ratings of my favorite movies
ratings_of_favorite_movies <- movies[(movies$Title %in% favorite_movies), c("Title", "Rating", "Duration", "Year")]
# Arrange the data frame in descending order by Rating
ratings_of_favorite_movies <- ratings_of_favorite_movies[order(ratings_of_favorite_movies$Rating, decreasing = TRUE), ]
# Print standings of my favorite movies
cat("Standings of My Favorite Movies:\n")
print(ratings_of_favorite_movies)
# Assuming 'movies' data frame is available with columns: Title, Year, Rating, Votes
# Load required libraries
library(tidyverse)
library(ggplot2)
# Calculate yearly rating averages
average_ratings <- movies %>%
group_by(Year) %>%
summarise(Average_Rating = mean(Rating),
Number_of_Movies = n())
# Scatter plot for yearly rating averages
ggplot(average_ratings, aes(x = Year, y = Average_Rating, size = Number_of_Movies)) +
geom_point() +
labs(title = "Yearly Average Ratings of Turkish Movies",
x = "Year",
y = "Average Rating") +
theme_minimal()
# Number of movies over the years
ggplot(average_ratings, aes(x = Year, y = Number_of_Movies)) +
geom_bar(stat = "identity", fill = "pink") +
labs(title = "Number of Turkish Movies Released Each Year",
x = "Year",
y = "Number of Movies") +
theme_minimal()
# Box plots of ratings over the years
ggplot(movies, aes(x = as.factor(Year), y = Rating)) +
geom_boxplot(fill = "pink") +
labs(title = "Box Plots of Ratings of Turkish Movies Over the Years",
x = "Year",
y = "Rating") +
theme_minimal()
# Assuming 'movies' is your data frame with columns: Title, Year, Duration, Rating, Votes, Rank
# Calculate correlation coefficient between Votes and Ratings
corr_votes_rating <- cor(movies$Votes, movies$Rating)
# Print the correlation coefficient
cat("Correlation Coefficient between Votes and Ratings:", corr_votes_rating, "\n")
# Assuming 'movies' is your data frame with columns: Title, Year, Duration, Rating, Votes, Rank
# Calculate correlation coefficient between Duration and Ratings
corr_duration_rating <- cor(movies$Duration, movies$Rating)
# Print the correlation coefficient
cat("Correlation Coefficient between Duration and Ratings:", corr_duration_rating, "\n")
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URL for Top1000
url_top_1000  <- "https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&groups=top_1000&country_of_origin=TR"
# Create empty vectors to store movie details
Title <- c()
Year <- c()
# Loop through each URL and scrape data & read HTML content of the IMDb website
for(url in url_top_1000){
website = read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
# Append data to vectors
Title <- append(Title,title_names)
Year <- append(Year, year)
}
# Create a data frame from the scraped data
movies_top_1000_turkish <- data.frame(Title, Year)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies_top_1000_turkish))
# Assuming 'movies_top_1000_turkish' and 'movies' have columns: "Title", "Year", "Duration", "Rating", "Votes"
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Merge based on "Title" and "Year"
top1000_merged <- merge(movies_top_1000_turkish, movies, by = c("Title", "Year"), all.x = TRUE)
# Display the merged data frame
print(top1000_merged)
top1000_merged_ordered <- top1000_merged[order(top1000_merged$Rating, decreasing = TRUE),]
print(top1000_merged_ordered)
load("C:/Users/senae/OneDrive/Belgeler/GitHub/emu430-fall2023-ensici/.RData")
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
gsub("^\\s+|\\s+$", "", y)
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
Sys.getlocale()
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()  # Corrected variable name
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>%
html_nodes(".sc-1b7x5y9-6.gwfzJB.dli-watch-bar") %>%
html_text() %>%
str_extract_all("\\d+") %>%
lapply(function(x) as.numeric(x)) %>%
unlist() %>%
sum()
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
install.packages("gsubfn")
library(tidyverse)
library(stringr)
library(rvest)
library(ggplot2)
# IMDb URLs for movies between 2010-2023 and before 2010
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()  # Corrected variable name
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>%
html_nodes(".sc-1b7x5y9-6.gwfzJB.dli-watch-bar") %>%
html_text() %>%
str_extract_all("\\d+") %>%
lapply(function(x) as.numeric(x)) %>%
unlist() %>%
sum()
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
# Show the first few rows of the data frame
cat("First few rows of the 'movies' data frame:\n")
print(head(movies))
